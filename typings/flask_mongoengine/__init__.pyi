"""
This type stub file was generated by pyright.
"""

import inspect
import mongoengine
from flask import Flask, abort, current_app
from mongoengine.base.fields import BaseField
from mongoengine.errors import DoesNotExist
from mongoengine.queryset import QuerySet
from .connection import *
from .json import override_json_encoder
from .pagination import *
from .sessions import *
from .wtf import WtfBaseField

VERSION = ...
def get_version(): # -> str:
    """Return the VERSION as a string."""
    ...

__version__ = ...
def current_mongoengine_instance(): # -> MongoEngine | None:
    """Return a MongoEngine instance associated with current Flask app."""
    ...

class MongoEngine:
    """Main class used for initialization of Flask-MongoEngine."""
    def __init__(self, app=..., config=...) -> None:
        ...
    
    def init_app(self, app, config=...): # -> None:
        ...
    
    @property
    def connection(self): # -> Any:
        """
        Return MongoDB connection(s) associated with this MongoEngine
        instance.
        """
        ...
    


class BaseQuerySet(QuerySet):
    """Mongoengine's queryset extended with handy extras."""
    def get_or_404(self, *args, **kwargs): # -> Any | tuple[Any, ...]:
        """
        Get a document and raise a 404 Not Found error if it doesn't
        exist.
        """
        ...
    
    def first_or_404(self, message=...): # -> BaseQuerySet | Any | tuple[Any, ...]:
        """Same as get_or_404, but uses .first, not .get."""
        ...
    
    def paginate(self, page, per_page, **kwargs): # -> Pagination:
        """
        Paginate the QuerySet with a certain number of docs per page
        and return docs for a given page.
        """
        ...
    
    def paginate_field(self, field_name, doc_id, page, per_page, total=...): # -> ListFieldPagination:
        """
        Paginate items within a list field from one document in the
        QuerySet.
        """
        ...
    


class Document(mongoengine.Document):
    """Abstract document with extra helpers in the queryset class"""
    meta = ...
    def paginate_field(self, field_name, page, per_page, total=...): # -> ListFieldPagination:
        """Paginate items within a list field."""
        ...
    


class DynamicDocument(mongoengine.DynamicDocument):
    """Abstract Dynamic document with extra helpers in the queryset class"""
    meta = ...


