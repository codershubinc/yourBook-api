"""
This type stub file was generated by pyright.
"""

import sys
from wtforms.fields import SelectFieldBase, StringField, TextAreaField

"""
Useful form fields for use with the mongoengine.
"""
__all__ = ("ModelSelectField", "QuerySetSelectField")
if sys.version_info >= (3, 0):
    unicode = str
class QuerySetSelectField(SelectFieldBase):
    """
    Given a QuerySet either at initialization or inside a view, will display a
    select drop-down field of choices. The `data` property actually will
    store/keep an ORM model instance, not the ID. Submitting a choice which is
    not in the queryset will result in a validation error.

    Specifying `label_attr` in the constructor will use that property of the
    model instance for display in the list, else the model object's `__str__`
    or `__unicode__` will be used.

    If `allow_blank` is set to `True`, then a blank choice will be added to the
    top of the list. Selecting this choice will result in the `data` property
    being `None`.  The label for the blank choice can be set by specifying the
    `blank_text` parameter.
    """
    widget = ...
    def __init__(self, label=..., validators=..., queryset=..., label_attr=..., allow_blank=..., blank_text=..., label_modifier=..., **kwargs) -> None:
        ...
    
    def iter_choices(self): # -> Generator[tuple[Literal['__None'], str, bool] | tuple[Any, Any, bool | Any], Any, None]:
        ...
    
    def process_formdata(self, valuelist): # -> None:
        ...
    
    def pre_validate(self, form): # -> None:
        ...
    


class QuerySetSelectMultipleField(QuerySetSelectField):
    widget = ...
    def __init__(self, label=..., validators=..., queryset=..., label_attr=..., allow_blank=..., blank_text=..., **kwargs) -> None:
        ...
    
    def process_formdata(self, valuelist): # -> None:
        ...
    


class ModelSelectField(QuerySetSelectField):
    """
    Like a QuerySetSelectField, except takes a model class instead of a
    queryset and lists everything in it.
    """
    def __init__(self, label=..., validators=..., model=..., **kwargs) -> None:
        ...
    


class ModelSelectMultipleField(QuerySetSelectMultipleField):
    """
    Allows multiple select
    """
    def __init__(self, label=..., validators=..., model=..., **kwargs) -> None:
        ...
    


class JSONField(TextAreaField):
    def process_formdata(self, value): # -> None:
        ...
    


class DictField(JSONField):
    def process_formdata(self, value): # -> None:
        ...
    


class NoneStringField(StringField):
    """
    Custom StringField that counts "" as None
    """
    def process_formdata(self, valuelist): # -> None:
        ...
    


class BinaryField(TextAreaField):
    """
    Custom TextAreaField that converts its value with binary_type.
    """
    def process_formdata(self, valuelist): # -> None:
        ...
    


