"""
This type stub file was generated by pyright.
"""

import sys

"""
Tools for generating forms based on mongoengine Document schemas.
"""
__all__ = ("model_fields", "model_form")
if sys.version_info >= (3, 0):
    unicode = str
def converts(*args): # -> Callable[..., Any]:
    ...

class ModelConverter:
    def __init__(self, converters=...) -> None:
        ...
    
    def convert(self, model, field, field_args): # -> SelectMultipleField | RadioField | SelectField | None:
        ...
    
    @converts("StringField")
    def conv_String(self, model, field, kwargs): # -> PasswordField | TextAreaField | StringField:
        ...
    
    @converts("URLField")
    def conv_URL(self, model, field, kwargs): # -> NoneStringField:
        ...
    
    @converts("EmailField")
    def conv_Email(self, model, field, kwargs): # -> NoneStringField:
        ...
    
    @converts("IntField")
    def conv_Int(self, model, field, kwargs): # -> IntegerField:
        ...
    
    @converts("FloatField")
    def conv_Float(self, model, field, kwargs): # -> FloatField:
        ...
    
    @converts("DecimalField")
    def conv_Decimal(self, model, field, kwargs): # -> DecimalField:
        ...
    
    @converts("BooleanField")
    def conv_Boolean(self, model, field, kwargs): # -> BooleanField:
        ...
    
    @converts("DateTimeField")
    def conv_DateTime(self, model, field, kwargs): # -> DateTimeField:
        ...
    
    @converts("DateField")
    def conv_Date(self, model, field, kwargs): # -> DateField:
        ...
    
    @converts("BinaryField")
    def conv_Binary(self, model, field, kwargs): # -> BinaryField:
        ...
    
    @converts("DictField")
    def conv_Dict(self, model, field, kwargs): # -> DictField:
        ...
    
    @converts("ListField")
    def conv_List(self, model, field, kwargs): # -> ModelSelectMultipleField | SelectMultipleField | RadioField | SelectField | FieldList[SelectField] | None:
        ...
    
    @converts("SortedListField")
    def conv_SortedList(self, model, field, kwargs): # -> ModelSelectMultipleField | SelectMultipleField | RadioField | SelectField | FieldList[SelectField] | None:
        ...
    
    @converts("GeoLocationField")
    def conv_GeoLocation(self, model, field, kwargs): # -> None:
        ...
    
    @converts("ObjectIdField")
    def conv_ObjectId(self, model, field, kwargs): # -> None:
        ...
    
    @converts("EmbeddedDocumentField")
    def conv_EmbeddedDocument(self, model, field, kwargs): # -> FormField[Any]:
        ...
    
    @converts("ReferenceField")
    def conv_Reference(self, model, field, kwargs): # -> ModelSelectField:
        ...
    
    @converts("GenericReferenceField")
    def conv_GenericReference(self, model, field, kwargs): # -> None:
        ...
    
    def coerce(self, field_type):
        ...
    


def model_fields(model, only=..., exclude=..., field_args=..., converter=...): # -> OrderedDict[Any, Any]:
    """
    Generate a dictionary of fields for a given database model.

    See `model_form` docstring for description of parameters.
    """
    ...

def model_form(model, base_class=..., only=..., exclude=..., field_args=..., converter=...): # -> Any:
    """
    Create a wtforms Form for a given mongoengine Document schema::

        from flask_mongoengine.wtf import model_form
        from myproject.myapp.schemas import Article
        ArticleForm = model_form(Article)

    :param model:
        A mongoengine Document schema class
    :param base_class:
        Base form class to extend from. Must be a ``wtforms.Form`` subclass.
    :param only:
        An optional iterable with the property names that should be included in
        the form. Only these properties will have fields.
    :param exclude:
        An optional iterable with the property names that should be excluded
        from the form. All other properties will have fields.
    :param field_args:
        An optional dictionary of field names mapping to keyword arguments used
        to construct each field object.
    :param converter:
        A converter to generate the fields based on the model properties. If
        not set, ``ModelConverter`` is used.
    """
    ...

